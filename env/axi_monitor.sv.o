`ifndef AXI_MONITOR__SV
`define AXI_MONITOR__SV
class axi_monitor extends uvm_monitor;

   virtual tvip_axi_if vaxi;
   virtual tvip_ini_if vini;

   uvm_analysis_port #(axi_transaction)  ap;
   uvm_blocking_get_port #(axi_transaction)  port;

   reg [7:0]     data_cnt ;  

   `uvm_component_utils(axi_monitor)
   function new(string name = "axi_monitor", uvm_component parent = null);
      super.new(name, parent);
   endfunction

   virtual function void build_phase(uvm_phase phase);
      super.build_phase(phase);
      if(!uvm_config_db#(virtual tvip_axi_if)::get(this, "", "vaxi", vaxi))
         `uvm_fatal("axi_monitor", "virtual interface must be set for vaxi!!!")
      if(!uvm_config_db#(virtual tvip_ini_if)::get(this, "", "vini", vini))
         `uvm_fatal("axi_monitor", "virtual interface must be set for vini!!!")
      ap = new("ap", this);
      port = new("port", this);
   endfunction

   extern task main_phase(uvm_phase phase);
   extern task collect_one_pkt(axi_transaction tr);
endclass

task axi_monitor::main_phase(uvm_phase phase);
   axi_transaction tr;
   axi_transaction dtr;
   port.get(dtr);
   `uvm_info("axi_monitor", "get one transaction, copy and print it:", UVM_LOW)
   dtr.print();
   data_cnt = 0 ;

   tr = new("tr");

   tr.axi_raddr =  dtr.axi_raddr;
   tr.axi_len   =  dtr.axi_len  ;
   tr.axi_write =  0  ;
   tr.axi_enable =  1  ;

   while(1) begin
          //  tr = new("tr");
          //  //collect_one_pkt(tr);
          //  while(1) begin
          //  	@(posedge vaxi.aclk);
          //  	if(vaxi.rvalid) break;
          //  end
          //`uvm_info("axi_monitor", "begin to collect one pkt", UVM_LOW);
          //tr.axi_rdata =  vaxi.rdata   ;
          //tr.axi_raddr =  dtr.axi_raddr;
          //tr.axi_len   =  dtr.axi_len  ;
          //tr.axi_write =  0  ;
          //tr.axi_enable =  1  ;
          //`uvm_info("axi_monitor", "end collect one pkt, print it:", UVM_LOW);
          //tr.print();
          //ap.write(tr);
          //if (data_cnt==dtr.axi_len)   begin 
          //        port.get(dtr);
          //        `uvm_info("axi_monitor", "get one transaction, copy and print it:", UVM_LOW)
          //        dtr.print();
          //        data_cnt = 0 ;
          //end                   
          //else   data_cnt = data_cnt + 1 ;

	  @(posedge vaxi.aclk);
		if(vaxi.rvalid)  begin
          		`uvm_info("axi_monitor", "begin to collect one pkt", UVM_LOW);
			tr.axi_rdata =  vaxi.rdata      ;
         		`uvm_info("axi_monitor", "end collect one pkt, print it:", UVM_LOW);
			tr.print();
          		ap.write(tr);
			if (data_cnt==dtr.axi_len)   begin 
         		         port.get(dtr);
         		         `uvm_info("axi_monitor", "get one transaction, copy and print it:", UVM_LOW)
         		         dtr.print();
         		         data_cnt <= 0 ;
				 tr.axi_raddr   =  dtr.axi_raddr;
              	                 tr.axi_len     =  dtr.axi_len  ; 
         		 end                   
         		 else   data_cnt <= data_cnt + 1 ;
		end
   end
endtask

task axi_monitor::collect_one_pkt(axi_transaction tr);
   while(1) begin
      @(posedge vaxi.aclk);
      if(vaxi.rvalid) break;
   end

   `uvm_info("axi_monitor", "begin to collect one pkt", UVM_LOW);
   tr.axi_rdata =  vaxi.rdata;
   `uvm_info("axi_monitor", "end collect one pkt, print it:", UVM_LOW);
    tr.print();
endtask


`endif
